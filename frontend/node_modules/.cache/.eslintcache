[{"D:\\Documents\\Project\\crud-app\\frontend\\src\\index.js":"1","D:\\Documents\\Project\\crud-app\\frontend\\src\\reportWebVitals.js":"2","D:\\Documents\\Project\\crud-app\\frontend\\src\\App.js":"3","D:\\Documents\\Project\\crud-app\\frontend\\src\\store.js":"4","D:\\Documents\\Project\\crud-app\\frontend\\src\\pages\\Login.js":"5","D:\\Documents\\Project\\crud-app\\frontend\\src\\pages\\Home.js":"6","D:\\Documents\\Project\\crud-app\\frontend\\src\\pages\\BoardUser.js":"7","D:\\Documents\\Project\\crud-app\\frontend\\src\\pages\\Register.js":"8","D:\\Documents\\Project\\crud-app\\frontend\\src\\pages\\BoardModerator.js":"9","D:\\Documents\\Project\\crud-app\\frontend\\src\\pages\\Profile.js":"10","D:\\Documents\\Project\\crud-app\\frontend\\src\\pages\\BoardAdmin.js":"11","D:\\Documents\\Project\\crud-app\\frontend\\src\\students\\AddStudent.js":"12","D:\\Documents\\Project\\crud-app\\frontend\\src\\students\\UpdateStudent.js":"13","D:\\Documents\\Project\\crud-app\\frontend\\src\\Layout\\Navbar.js":"14","D:\\Documents\\Project\\crud-app\\frontend\\src\\students\\ReadStudent.js":"15","D:\\Documents\\Project\\crud-app\\frontend\\src\\reducers\\root-reducer.js":"16","D:\\Documents\\Project\\crud-app\\frontend\\src\\actions.js":"17","D:\\Documents\\Project\\crud-app\\frontend\\src\\Components\\FormatDate.js":"18","D:\\Documents\\Project\\crud-app\\frontend\\src\\services\\user.service.js":"19","D:\\Documents\\Project\\crud-app\\frontend\\src\\Components\\ConfirmBox.js":"20","D:\\Documents\\Project\\crud-app\\frontend\\src\\reducers\\students-reducer.js":"21","D:\\Documents\\Project\\crud-app\\frontend\\src\\reducers\\find-student-reducer.js":"22","D:\\Documents\\Project\\crud-app\\frontend\\src\\reducers\\add-student-reducer.js":"23","D:\\Documents\\Project\\crud-app\\frontend\\src\\reducers\\auth-reducers.js":"24","D:\\Documents\\Project\\crud-app\\frontend\\src\\reducers\\message-reducer.js":"25","D:\\Documents\\Project\\crud-app\\frontend\\src\\actionTypes.js":"26","D:\\Documents\\Project\\crud-app\\frontend\\src\\services\\auth.service.js":"27","D:\\Documents\\Project\\crud-app\\frontend\\src\\services\\auth-header.js":"28"},{"size":1020,"mtime":1698205005006,"results":"29","hashOfConfig":"30"},{"size":375,"mtime":1698205005012,"results":"31","hashOfConfig":"30"},{"size":1531,"mtime":1698205005000,"results":"32","hashOfConfig":"30"},{"size":357,"mtime":1698205005016,"results":"33","hashOfConfig":"30"},{"size":3760,"mtime":1698205005008,"results":"34","hashOfConfig":"30"},{"size":9942,"mtime":1698205005008,"results":"35","hashOfConfig":"30"},{"size":770,"mtime":1698205005007,"results":"36","hashOfConfig":"30"},{"size":4454,"mtime":1698205005009,"results":"37","hashOfConfig":"30"},{"size":785,"mtime":1698205005007,"results":"38","hashOfConfig":"30"},{"size":1175,"mtime":1698205005009,"results":"39","hashOfConfig":"30"},{"size":10446,"mtime":1698205005006,"results":"40","hashOfConfig":"30"},{"size":4883,"mtime":1698205005016,"results":"41","hashOfConfig":"30"},{"size":6908,"mtime":1698205005017,"results":"42","hashOfConfig":"30"},{"size":4187,"mtime":1698205005003,"results":"43","hashOfConfig":"30"},{"size":1742,"mtime":1698205005017,"results":"44","hashOfConfig":"30"},{"size":498,"mtime":1698205005012,"results":"45","hashOfConfig":"30"},{"size":4338,"mtime":1698205005004,"results":"46","hashOfConfig":"30"},{"size":346,"mtime":1698205005003,"results":"47","hashOfConfig":"30"},{"size":611,"mtime":1698205005015,"results":"48","hashOfConfig":"30"},{"size":2714,"mtime":1698205005001,"results":"49","hashOfConfig":"30"},{"size":1751,"mtime":1698205005012,"results":"50","hashOfConfig":"30"},{"size":458,"mtime":1698205005010,"results":"51","hashOfConfig":"30"},{"size":318,"mtime":1698205005010,"results":"52","hashOfConfig":"30"},{"size":992,"mtime":1698205005010,"results":"53","hashOfConfig":"30"},{"size":370,"mtime":1698205005010,"results":"54","hashOfConfig":"30"},{"size":666,"mtime":1698205005004,"results":"55","hashOfConfig":"30"},{"size":670,"mtime":1698205005014,"results":"56","hashOfConfig":"30"},{"size":232,"mtime":1698205005013,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"g0gulz",{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122"},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155"},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Documents\\Project\\crud-app\\frontend\\src\\index.js",[],[],"D:\\Documents\\Project\\crud-app\\frontend\\src\\reportWebVitals.js",[],[],"D:\\Documents\\Project\\crud-app\\frontend\\src\\App.js",[],[],"D:\\Documents\\Project\\crud-app\\frontend\\src\\store.js",["159"],[],"import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers/root-reducer\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nconst middleWare = [thunk];\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store;\r\n","D:\\Documents\\Project\\crud-app\\frontend\\src\\pages\\Login.js",["160"],[],"import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { login } from \"../actions\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst Login = () => {\r\n  const [username, setUsername] = useState(\"\");\r\n  // const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [successful, setSuccessful] = useState(false);\r\n\r\n  const { message } = useSelector((state) => state.message);\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n\r\n  const onChangeUsername = (e) => {\r\n    const username = e.target.value;\r\n    setUsername(username);\r\n  };\r\n\r\n  const onChangePassword = (e) => {\r\n    const password = e.target.value;\r\n    setPassword(password);\r\n  };\r\n\r\n  const handleRegister = (e) => {\r\n    e.preventDefault();\r\n\r\n    setSuccessful(false);\r\n\r\n    // form.current.validateAll();\r\n\r\n    {\r\n      dispatch(login(username, password))\r\n        .then(() => {\r\n          setSuccessful(true);\r\n          toast.success(\"User Log In successfully !\");\r\n          navigate(\"/\"); //redirect to login page (should be)\r\n        })\r\n        .catch(() => {\r\n          setSuccessful(false);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container py-3 mb-3\">\r\n      <div className=\"col-md-6 offset-md-3 my-5 border rounded p-4 mt-2 shadow\">\r\n        {/* <img\r\n          src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\r\n          alt=\"profile-img\"\r\n          className=\"profile-img-card\"\r\n        /> */}\r\n\r\n        <form onSubmit={handleRegister} className=\"row g-3\">\r\n          <h2 className=\"text-center\">Log in</h2>\r\n          {!successful && (\r\n            <div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"username\" className=\"form-label\">\r\n                  Username\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  name=\"username\"\r\n                  value={username}\r\n                  onChange={onChangeUsername}\r\n                  required\r\n                  minLength={3}\r\n                  maxLength={20}\r\n                  title=\"Please enter a valid username between 3 and 20 characters\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"password\" className=\"form-label\">\r\n                  Password\r\n                </label>\r\n                <input\r\n                  type=\"password\"\r\n                  className=\"form-control\"\r\n                  name=\"password\"\r\n                  value={password}\r\n                  onChange={onChangePassword}\r\n                  required\r\n                  minLength={6}\r\n                  maxLength={40}\r\n                  title=\"Please enter a valid password between 6 and 40 characters\"\r\n                />\r\n              </div>\r\n              <div className=\"d-grid gap-2 col-6 mx-auto py-3\">\r\n                <button className=\"btn btn-primary\" type=\"submit\">\r\n                  Log in\r\n                </button>\r\n                <Link className=\"btn btn-outline-danger\" to=\"/\">\r\n                  Cancel\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {message && (\r\n            <div className=\"form-group\">\r\n              <div\r\n                className={\r\n                  successful ? \"alert alert-success\" : \"alert alert-danger\"\r\n                }\r\n                role=\"alert\"\r\n              >\r\n                {message}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","D:\\Documents\\Project\\crud-app\\frontend\\src\\pages\\Home.js",["161","162","163","164","165"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { formatDate } from \"../Components/FormatDate\";\r\nimport ConfirmBox from \"../Components/ConfirmBox\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\r\nimport \"react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit.min.css\";\r\nimport \"react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css\";\r\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\nimport ToolkitProvider, {\r\n  CSVExport,\r\n} from \"react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { fetchStudents, deleteStudent } from \"../actions\";\r\nimport UserService from \"../services/user.service\";\r\n\r\nexport default function Home() {\r\n  const dispatch = useDispatch();\r\n  const students = useSelector((state) => state.students);\r\n  const [open, setOpen] = useState(false);\r\n  const [deleteData, setDeleteData] = useState(false);\r\n  const [content, setContent] = useState(\"\");\r\n  useEffect(() => {\r\n    dispatch(fetchStudents());\r\n    // console.log(fetchStudents());\r\n  }, [dispatch]);\r\n  // TODO: check if token is valid\r\n  // useEffect(() => {\r\n  //   UserService.getPublicContent().then(\r\n  //     (response) => {\r\n  //       setContent(response.data);\r\n  //     },\r\n  //     (error) => {\r\n  //       const _content =\r\n  //         (error.response && error.response.data) ||\r\n  //         error.message ||\r\n  //         error.toString();\r\n\r\n  //       setContent(_content);\r\n  //     }\r\n  //   );\r\n  // }, []);\r\n  //delete student\r\n  function handleDeleteStudent() {\r\n    dispatch(deleteStudent(deleteData?.id));\r\n    setOpen(false);\r\n    toast.success(\"Student deleted successfully !\");\r\n  }\r\n  //open delete dialog\r\n  function openDelete(student) {\r\n    setOpen(true);\r\n    setDeleteData(student);\r\n  }\r\n\r\n  //Bootstrap table\r\n  const studentsWithIndex = students.map((student, index) => ({\r\n    ...student,\r\n    index: index + 1,\r\n  }));\r\n\r\n  //exoport csv\r\n  const { ExportCSVButton } = CSVExport;\r\n  //search\r\n  const MySearch = (props) => {\r\n    const [searchQuery, setSearchQuery] = useState(\"\");\r\n\r\n    const handleInputChange = (event) => {\r\n      const value = event.target.value;\r\n      setSearchQuery(value);\r\n      props.onSearch(value); // Call the onSearch method passed by ToolkitProvider\r\n    };\r\n\r\n    const handleKeyPress = (event) => {\r\n      if (event.key === \"Enter\") {\r\n        handleSearch();\r\n      }\r\n      if (event.key === \"Escape\" || event.key === \"Delete\") {\r\n        handleClear();\r\n      }\r\n    };\r\n\r\n    const handleSearch = () => {\r\n      props.onSearch(searchQuery);\r\n    };\r\n\r\n    const handleClear = () => {\r\n      setSearchQuery(\"\");\r\n      props.onSearch(\"\"); // Perform a search with an empty query to reset the table\r\n    };\r\n\r\n    return (\r\n      <div className=\"col-md-12  \">\r\n        <div className=\"row g-3 d-flex flex-row  \">\r\n          <div className=\"col-md-6\">\r\n            <input\r\n              className=\"form-control\"\r\n              value={searchQuery}\r\n              onChange={handleInputChange}\r\n              onKeyDown={handleKeyPress}\r\n              type=\"text\"\r\n              placeholder=\"Search this table\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-6 d-flex\">\r\n            <button className=\"btn btn-primary me-2\" onClick={handleSearch}>\r\n              Search\r\n            </button>\r\n            <button className=\"btn btn-secondary\" onClick={handleClear}>\r\n              Clear\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Custom formatter for the \"action\" column\r\n  const actionFormatter = (cell, row) => {\r\n    return (\r\n      <div>\r\n        <Link to={`/update-student/${row.id}`}>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-success m-1\"\r\n            title=\"Edit\"\r\n          >\r\n            <img\r\n              src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/95/UniversalEditButton3.svg/1024px-UniversalEditButton3.svg.png\"\r\n              alt=\"edit\"\r\n              width=\"20\"\r\n              height=\"20\"\r\n            />\r\n          </button>\r\n        </Link>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-outline-danger m-1\"\r\n          title=\"Delete\"\r\n          onClick={() => openDelete(row)}\r\n        >\r\n          <img\r\n            src=\"https://cdn-icons-png.flaticon.com/512/3687/3687412.png\"\r\n            alt=\"delete\"\r\n            width=\"20\"\r\n            height=\"20\"\r\n          ></img>\r\n        </button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const dobHeaderFormatter = (\r\n    column,\r\n    colIndex,\r\n    { sortElement, filterElement }\r\n  ) => {\r\n    return (\r\n      <div>\r\n        {column.text}\r\n        {sortElement}\r\n        <div style={{ fontSize: \"10px\", fontWeight: \"lighter\" }}>\r\n          MM/dd/yyyy\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  // Custom cell style for the \"index\" column\r\n  const headerStyle = {\r\n    verticalAlign: \"top\",\r\n  };\r\n\r\n  //Columns\r\n  const columns = [\r\n    {\r\n      dataField: \"index\",\r\n      text: \"Index\",\r\n      // formatter: indexFormatter, // Using the custom index formatter\r\n      headerStyle: headerStyle, // Setting headerStyle to headerStyle\r\n      sort: true,\r\n    },\r\n    // {\r\n    //   dataField: \"id\",\r\n    //   text: \"Id\",\r\n    //   headerStyle: headerStyle, // Setting headerStyle to headerStyle\r\n    //   sort: true,\r\n    // },\r\n    {\r\n      dataField: \"lastName\",\r\n      text: \"Last Name\",\r\n      headerStyle: headerStyle,\r\n      sort: true,\r\n    },\r\n    {\r\n      dataField: \"middleName\",\r\n      text: \"Middle Name\",\r\n      headerStyle: headerStyle,\r\n      sort: true,\r\n    },\r\n    {\r\n      dataField: \"firstName\",\r\n      text: \"First Name\",\r\n      headerStyle: headerStyle,\r\n      sort: true,\r\n    },\r\n    {\r\n      dataField: \"dob\",\r\n      text: \"Date of Birth\",\r\n      formatter: (cell, row) => formatDate(cell), // Using the dateFormat function to format the date\r\n      headerFormatter: dobHeaderFormatter, // Using the custom header formatter\r\n      headerStyle: headerStyle,\r\n      sort: true,\r\n    },\r\n    {\r\n      dataField: \"major\",\r\n      text: \"Major\",\r\n      headerStyle: headerStyle,\r\n      sort: true,\r\n    },\r\n    // {\r\n    //   dataField: \"action\",\r\n    //   text: \"Action\",\r\n    //   formatter: actionFormatter, // Using the custom action formatter\r\n    //   headerStyle: headerStyle,\r\n    // },\r\n  ];\r\n  //Manually manage pagination state\r\n  const handlePageChange = (page) => {\r\n    setCurrentPage(page);\r\n  };\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const pageSize = 5; // Number of rows to show per page\r\n\r\n  // Calculate the index of the first and last items of the current page\r\n  const indexOfLastItem = currentPage * pageSize;\r\n  const indexOfFirstItem = indexOfLastItem - pageSize;\r\n  const currentItems = studentsWithIndex.slice(\r\n    indexOfFirstItem,\r\n    indexOfLastItem\r\n  );\r\n  return (\r\n    <div className=\"container\">\r\n      {students.length === 0 ? (\r\n        <p>{content} Error from frontend</p>\r\n      ) : (\r\n        <div className=\"py-3\">\r\n          <h1 className=\"text-center\">Student List</h1>\r\n          <div className=\"container\">\r\n            <ToolkitProvider\r\n              keyField=\"id\"\r\n              data={studentsWithIndex}\r\n              columns={columns}\r\n              search\r\n            >\r\n              {(props) => (\r\n                <div>\r\n                  <div className=\"col-md-12 mx-auto pb-3\">\r\n                    <div className=\"row g-3 align-items-center\">\r\n                      <div className=\"col-md-4\">\r\n                        <Link className=\"btn btn-success\" to=\"/add-student\">\r\n                          Add Student +\r\n                        </Link>\r\n                      </div>\r\n                      <div className=\"col-md-8\">\r\n                        <MySearch {...props.searchProps} />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  {/* <hr /> */}\r\n                  <BootstrapTable\r\n                    {...props.baseProps}\r\n                    striped\r\n                    hover\r\n                    condensed\r\n                    // pagination={paginationFactory()}\r\n                  />\r\n\r\n                  <ExportCSVButton\r\n                    className=\"btn btn-success mx-0\"\r\n                    {...props.csvProps}\r\n                  >\r\n                    Export CSV\r\n                  </ExportCSVButton>\r\n                </div>\r\n              )}\r\n            </ToolkitProvider>\r\n            {/* Pagination */}\r\n            <div className=\"d-flex justify-content-center mt-3\">\r\n              <ul className=\"pagination\">\r\n                {Array.from(\r\n                  { length: Math.ceil(studentsWithIndex.length / pageSize) },\r\n                  (_, index) => (\r\n                    <li\r\n                      key={index}\r\n                      className={`page-item ${\r\n                        index + 1 === currentPage ? \"active\" : \"\"\r\n                      }`}\r\n                    >\r\n                      <button\r\n                        className=\"page-link\"\r\n                        onClick={() => handlePageChange(index + 1)}\r\n                      >\r\n                        {index + 1}\r\n                      </button>\r\n                    </li>\r\n                  )\r\n                )}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      <ConfirmBox\r\n        open={open}\r\n        closeDialog={() => setOpen(false)}\r\n        firstName={deleteData.firstName}\r\n        deleteFunction={handleDeleteStudent}\r\n      />\r\n      <ToastContainer position=\"top-right\" />\r\n    </div>\r\n  );\r\n}\r\n","D:\\Documents\\Project\\crud-app\\frontend\\src\\pages\\BoardUser.js",[],[],"D:\\Documents\\Project\\crud-app\\frontend\\src\\pages\\Register.js",["166"],[],"import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { register } from \"../actions\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst Register = () => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [successful, setSuccessful] = useState(false);\r\n\r\n  const { message } = useSelector((state) => state.message);\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n\r\n  const onChangeUsername = (e) => {\r\n    const username = e.target.value;\r\n    setUsername(username);\r\n  };\r\n\r\n  const onChangeEmail = (e) => {\r\n    const email = e.target.value;\r\n    setEmail(email);\r\n  };\r\n\r\n  const onChangePassword = (e) => {\r\n    const password = e.target.value;\r\n    setPassword(password);\r\n  };\r\n\r\n  const handleRegister = (e) => {\r\n    e.preventDefault();\r\n\r\n    setSuccessful(false);\r\n\r\n    // form.current.validateAll();\r\n\r\n    {\r\n      dispatch(register(username, email, password))\r\n        .then(() => {\r\n          setSuccessful(true);\r\n          toast.success(\"User registered successfully !\");\r\n          navigate(\"/\"); //redirect to login page (should be)\r\n        })\r\n        .catch(() => {\r\n          setSuccessful(false);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container py-3 mb-3\">\r\n      <div className=\"col-md-6 offset-md-3 my-5 border rounded p-4 mt-2 shadow\">\r\n        {/* <img\r\n          src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\r\n          alt=\"profile-img\"\r\n          className=\"profile-img-card\"\r\n        /> */}\r\n\r\n        <form onSubmit={handleRegister} className=\"row g-3\">\r\n          <h2 className=\"text-center\">Register</h2>\r\n          {!successful && (\r\n            <div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"username\" className=\"form-label\">\r\n                  Username\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  name=\"username\"\r\n                  value={username}\r\n                  onChange={onChangeUsername}\r\n                  required\r\n                  minLength={3}\r\n                  maxLength={20}\r\n                  title=\"Please enter a valid username between 3 and 20 characters\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"email\" className=\"form-label\">\r\n                  Email\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  name=\"email\"\r\n                  value={email}\r\n                  onChange={onChangeEmail}\r\n                  required\r\n                  pattern=\"[a-z0-9._%+\\-]+@[a-z0-9.\\-]+\\.[a-z]{2,}$\"\r\n                  title=\"Please enter a valid email address\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"password\" className=\"form-label\">\r\n                  Password\r\n                </label>\r\n                <input\r\n                  type=\"password\"\r\n                  className=\"form-control\"\r\n                  name=\"password\"\r\n                  value={password}\r\n                  onChange={onChangePassword}\r\n                  required\r\n                  minLength={6}\r\n                  maxLength={40}\r\n                  title=\"Please enter a valid password between 6 and 40 characters\"\r\n                />\r\n              </div>\r\n              <div className=\"d-grid gap-2 col-6 mx-auto py-3\">\r\n                <button className=\"btn btn-primary\" type=\"submit\">\r\n                  Register\r\n                </button>\r\n                <Link className=\"btn btn-outline-danger\" to=\"/\">\r\n                  Cancel\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {message && (\r\n            <div className=\"form-group\">\r\n              <div\r\n                className={\r\n                  successful ? \"alert alert-success\" : \"alert alert-danger\"\r\n                }\r\n                role=\"alert\"\r\n              >\r\n                {message}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","D:\\Documents\\Project\\crud-app\\frontend\\src\\pages\\BoardModerator.js",[],[],"D:\\Documents\\Project\\crud-app\\frontend\\src\\pages\\Profile.js",[],[],"D:\\Documents\\Project\\crud-app\\frontend\\src\\pages\\BoardAdmin.js",["167","168"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { formatDate } from \"../Components/FormatDate\";\r\nimport ConfirmBox from \"../Components/ConfirmBox\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\r\nimport \"react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit.min.css\";\r\nimport \"react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css\";\r\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\nimport ToolkitProvider, {\r\n  CSVExport,\r\n} from \"react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { fetchStudents, deleteStudent } from \"../actions\";\r\nimport UserService from \"../services/user.service\";\r\n\r\nconst BoardAdmin = () => {\r\n  const [content, setContent] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n  const students = useSelector((state) => state.students);\r\n  const [open, setOpen] = useState(false);\r\n  const [deleteData, setDeleteData] = useState(false);\r\n  // get student data\r\n  useEffect(() => {\r\n    dispatch(fetchStudents());\r\n    console.log(dispatch(fetchStudents()));\r\n  }, [dispatch]);\r\n  //admin board\r\n  useEffect(() => {\r\n    UserService.getAdminBoard().then(\r\n      (response) => {\r\n        setContent(response.data);\r\n      },\r\n      (error) => {\r\n        const _content =\r\n          (error.response &&\r\n            error.response.data &&\r\n            error.response.data.message) ||\r\n          error.message ||\r\n          error.toString();\r\n\r\n        setContent(_content);\r\n      }\r\n    );\r\n  }, []);\r\n  function handleDeleteStudent() {\r\n    dispatch(deleteStudent(deleteData?.id));\r\n    setOpen(false);\r\n    toast.success(\"Student deleted successfully !\");\r\n  }\r\n  //open delete dialog\r\n  function openDelete(student) {\r\n    setOpen(true);\r\n    setDeleteData(student);\r\n  }\r\n  //pagination\r\n  // const sizePerPageRenderer = ({\r\n  //   options,\r\n  //   currSizePerPage,\r\n  //   onSizePerPageChange,\r\n  // }) => (\r\n  //   <div className=\"btn-group\" role=\"group\">\r\n  //     {options.map((option) => {\r\n  //       const isSelect = currSizePerPage === `${option.page}`;\r\n  //       return (\r\n  //         <button\r\n  //           key={option.text}\r\n  //           type=\"button\"\r\n  //           onClick={() => onSizePerPageChange(option.page)}\r\n  //           className={`btn ${isSelect ? \"btn-primary\" : \"btn-secondary\"}`}\r\n  //         >\r\n  //           {option.text}\r\n  //         </button>\r\n  //       );\r\n  //     })}\r\n  //   </div>\r\n  // );\r\n\r\n  // const options = {\r\n  //   sizePerPageRenderer,\r\n  // };\r\n\r\n  //Bootstrap table\r\n  const studentsWithIndex = students.map((student, index) => ({\r\n    ...student,\r\n    index: index + 1,\r\n  }));\r\n\r\n  //exoport csv\r\n  const { ExportCSVButton } = CSVExport;\r\n  //search\r\n  const MySearch = (props) => {\r\n    const [searchQuery, setSearchQuery] = useState(\"\");\r\n\r\n    const handleInputChange = (event) => {\r\n      const value = event.target.value;\r\n      setSearchQuery(value);\r\n      props.onSearch(value); // Call the onSearch method passed by ToolkitProvider\r\n    };\r\n\r\n    const handleKeyPress = (event) => {\r\n      if (event.key === \"Enter\") {\r\n        handleSearch();\r\n      }\r\n      if (event.key === \"Escape\" || event.key === \"Delete\") {\r\n        handleClear();\r\n      }\r\n    };\r\n\r\n    const handleSearch = () => {\r\n      props.onSearch(searchQuery);\r\n    };\r\n\r\n    const handleClear = () => {\r\n      setSearchQuery(\"\");\r\n      props.onSearch(\"\"); // Perform a search with an empty query to reset the table\r\n    };\r\n    return (\r\n      <div className=\"col-md-12  \">\r\n        <div className=\"row g-3 d-flex flex-row  \">\r\n          <div className=\"col-md-6\">\r\n            <input\r\n              className=\"form-control\"\r\n              value={searchQuery}\r\n              onChange={handleInputChange}\r\n              onKeyDown={handleKeyPress}\r\n              type=\"text\"\r\n              placeholder=\"Search this table\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-6 d-flex\">\r\n            <button className=\"btn btn-primary me-2\" onClick={handleSearch}>\r\n              Search\r\n            </button>\r\n            <button className=\"btn btn-secondary\" onClick={handleClear}>\r\n              Clear\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Custom formatter for the \"action\" column\r\n  const actionFormatter = (cell, row) => {\r\n    return (\r\n      <div>\r\n        <Link to={`/update-student/${row.id}`}>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-success m-1\"\r\n            title=\"Edit\"\r\n          >\r\n            <img\r\n              src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/95/UniversalEditButton3.svg/1024px-UniversalEditButton3.svg.png\"\r\n              alt=\"edit\"\r\n              width=\"20\"\r\n              height=\"20\"\r\n            />\r\n          </button>\r\n        </Link>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-outline-danger m-1\"\r\n          title=\"Delete\"\r\n          onClick={() => openDelete(row)}\r\n        >\r\n          <img\r\n            src=\"https://cdn-icons-png.flaticon.com/512/3687/3687412.png\"\r\n            alt=\"delete\"\r\n            width=\"20\"\r\n            height=\"20\"\r\n          ></img>\r\n        </button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const dobHeaderFormatter = (\r\n    column,\r\n    colIndex,\r\n    { sortElement, filterElement }\r\n  ) => {\r\n    return (\r\n      <div>\r\n        {column.text}\r\n        {sortElement}\r\n        <div style={{ fontSize: \"10px\", fontWeight: \"lighter\" }}>\r\n          MM/dd/yyyy\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  // Custom cell style for the \"index\" column\r\n  const headerStyle = {\r\n    verticalAlign: \"top\",\r\n  };\r\n\r\n  //Columns\r\n  const columns = [\r\n    {\r\n      dataField: \"index\",\r\n      text: \"Index\",\r\n      // formatter: indexFormatter, // Using the custom index formatter\r\n      headerStyle: headerStyle, // Setting headerStyle to headerStyle\r\n      sort: true,\r\n    },\r\n    // {\r\n    //   dataField: \"id\",\r\n    //   text: \"Id\",\r\n    //   headerStyle: headerStyle, // Setting headerStyle to headerStyle\r\n    //   sort: true,\r\n    // },\r\n    {\r\n      dataField: \"lastName\",\r\n      text: \"Last Name\",\r\n      headerStyle: headerStyle,\r\n      sort: true,\r\n    },\r\n    {\r\n      dataField: \"middleName\",\r\n      text: \"Middle Name\",\r\n      headerStyle: headerStyle,\r\n      sort: true,\r\n    },\r\n    {\r\n      dataField: \"firstName\",\r\n      text: \"First Name\",\r\n      headerStyle: headerStyle,\r\n      sort: true,\r\n    },\r\n    {\r\n      dataField: \"dob\",\r\n      text: \"Date of Birth\",\r\n      formatter: (cell, row) => formatDate(cell), // Using the dateFormat function to format the date\r\n      headerFormatter: dobHeaderFormatter, // Using the custom header formatter\r\n      headerStyle: headerStyle,\r\n      sort: true,\r\n    },\r\n    {\r\n      dataField: \"major\",\r\n      text: \"Major\",\r\n      headerStyle: headerStyle,\r\n      sort: true,\r\n    },\r\n    {\r\n      dataField: \"action\",\r\n      text: \"Action\",\r\n      formatter: actionFormatter, // Using the custom action formatter\r\n      headerStyle: headerStyle,\r\n    },\r\n  ];\r\n  //Manually manage pagination state\r\n  const handlePageChange = (page) => {\r\n    setCurrentPage(page);\r\n  };\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const pageSize = 5; // Number of rows to show per page\r\n\r\n  // Calculate the index of the first and last items of the current page\r\n  const indexOfLastItem = currentPage * pageSize;\r\n  const indexOfFirstItem = indexOfLastItem - pageSize;\r\n  const currentItems = studentsWithIndex.slice(\r\n    indexOfFirstItem,\r\n    indexOfLastItem\r\n  );\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"py-3\">\r\n        <h1 className=\"text-center\">{content}</h1>\r\n        <div className=\"container\">\r\n          <ToolkitProvider\r\n            keyField=\"id\"\r\n            data={studentsWithIndex}\r\n            columns={columns}\r\n            search\r\n          >\r\n            {(props) => (\r\n              <div>\r\n                <div className=\"col-md-12 mx-auto pb-3\">\r\n                  <div className=\"row g-3 align-items-center\">\r\n                    <div className=\"col-md-4\">\r\n                      <Link className=\"btn btn-success\" to=\"/add-student\">\r\n                        Add Student +\r\n                      </Link>\r\n                    </div>\r\n                    <div className=\"col-md-8\">\r\n                      <MySearch {...props.searchProps} />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                {/* <hr /> */}\r\n                <BootstrapTable\r\n                  {...props.baseProps}\r\n                  striped\r\n                  hover\r\n                  condensed\r\n                  // pagination={paginationFactory()}\r\n                />\r\n\r\n                <ExportCSVButton\r\n                  className=\"btn btn-success mx-0\"\r\n                  {...props.csvProps}\r\n                >\r\n                  Export CSV\r\n                </ExportCSVButton>\r\n              </div>\r\n            )}\r\n          </ToolkitProvider>\r\n          {/* Pagination */}\r\n          <div className=\"d-flex justify-content-center mt-3\">\r\n            <ul className=\"pagination\">\r\n              {Array.from(\r\n                { length: Math.ceil(studentsWithIndex.length / pageSize) },\r\n                (_, index) => (\r\n                  <li\r\n                    key={index}\r\n                    className={`page-item ${\r\n                      index + 1 === currentPage ? \"active\" : \"\"\r\n                    }`}\r\n                  >\r\n                    <button\r\n                      className=\"page-link\"\r\n                      onClick={() => handlePageChange(index + 1)}\r\n                    >\r\n                      {index + 1}\r\n                    </button>\r\n                  </li>\r\n                )\r\n              )}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <ConfirmBox\r\n        open={open}\r\n        closeDialog={() => setOpen(false)}\r\n        firstName={deleteData.firstName}\r\n        deleteFunction={handleDeleteStudent}\r\n      />\r\n      <ToastContainer position=\"top-right\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BoardAdmin;\r\n","D:\\Documents\\Project\\crud-app\\frontend\\src\\students\\AddStudent.js",["169","170","171","172","173"],[],"import React, { useState } from \"react\";\r\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addStudent, fetchStudents } from \"../actions\";\r\nexport default function AddStudent() {\r\n  let navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  // Access the students state from the Redux store using useSelector\r\n  const students = useSelector((state) => state.students);\r\n  const [data, setData] = useState({\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    middleName: \"\",\r\n    dob: \"\",\r\n    major: \"\",\r\n  });\r\n\r\n  // Render the form when students data is available\r\n  const { firstName, middleName, lastName, dob, major } = students;\r\n  const onInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    if (name !== \"dob\") {\r\n      console.log(name, value);\r\n      // Capitalize the first letter of each word in the input\r\n      const capitalizedValue = value\r\n        .split(\" \")\r\n        .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\r\n        .join(\" \");\r\n      // Update the students state using Redux dispatch\r\n      // dispatch({\r\n      //   type: \"ADD_STUDENT_SUCCESS\",\r\n      //   payload: { [name]: capitalizedValue },\r\n      // });\r\n      setData({ ...data, [name]: capitalizedValue });\r\n    } else {\r\n      // Update the students state using Redux dispatch\r\n      console.log(name, value);\r\n      // dispatch({\r\n      //   type: \"ADD_STUDENT_SUCCESS\",\r\n      //   payload: { [name]: value },\r\n      // });\r\n      setData({ ...data, [name]: value });\r\n    }\r\n  };\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    dispatch(addStudent(data));\r\n    toast.success(\"Student Added Successfully\");\r\n    // Fetch the updated list of students after adding a new student\r\n    await dispatch(fetchStudents()).then(() => {\r\n      navigate(\"/\");\r\n      // window.location.reload();\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"col-md-6 offset-md-3 my-5 border rounded p-4 mt-2 shadow\">\r\n        <form onSubmit={(e) => onSubmit(e)} class=\"row g-3\">\r\n          <h2 className=\"text-center\">Add Student</h2>\r\n          <div className=\"col-md-4\">\r\n            <label for=\"inputLastName\" className=\"form-label\">\r\n              Last name <a style={{ color: \"red\" }}> *</a>\r\n            </label>\r\n            <input\r\n              id=\"inputLastName\"\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"lastName\"\r\n              value={lastName}\r\n              onChange={(e) => onInputChange(e)}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            <label for=\"inputMiddleName\" className=\"form-label\">\r\n              Middle name\r\n            </label>\r\n            <input\r\n              value={middleName}\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"middleName\"\r\n              onChange={(e) => onInputChange(e)}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            <label for=\"inputFirstName\" className=\"form-label\">\r\n              First name <a style={{ color: \"red\" }}> *</a>\r\n            </label>\r\n            <input\r\n              value={firstName}\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"firstName\"\r\n              onChange={(e) => onInputChange(e)}\r\n              required\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col-md-6\">\r\n            <label for=\"inputDob\" className=\"form-label\">\r\n              Date of Birth <a style={{ color: \"red\" }}> *</a>\r\n            </label>\r\n            <input\r\n              value={dob}\r\n              type=\"date\" //yyyy-mm-dd>{student.dob}</td>\r\n              className=\"form-control text-center\"\r\n              name=\"dob\"\r\n              onChange={(e) => onInputChange(e)}\r\n              min=\"1000-01-01\"\r\n              max=\"2024-01-01\"\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <label for=\"major\" className=\"form-label\">\r\n              Major <a style={{ color: \"red\" }}> *</a>\r\n            </label>\r\n            <input\r\n              value={major}\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"major\"\r\n              onChange={(e) => onInputChange(e)}\r\n              required\r\n              style={{ textTransform: \"capitalize\" }}\r\n            />\r\n          </div>\r\n          <div className=\"d-grid gap-2 col-6 mx-auto\">\r\n            <button className=\"btn btn-primary\" type=\"submit\">\r\n              Submit\r\n            </button>\r\n            <Link className=\"btn btn-outline-danger\" to=\"/\">\r\n              Cancel\r\n            </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Documents\\Project\\crud-app\\frontend\\src\\students\\UpdateStudent.js",["174","175","176","177","178","179","180","181"],[],"import \"../App.css\";\r\nimport axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\r\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\r\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { updateStudent, fetchStudents, findStudent } from \"../actions\";\r\n\r\nexport default function UpdateStudent() {\r\n  let navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  // const students = useSelector((state) => state.students);\r\n  // const data = useSelector((state) => state.findStudentReducer);\r\n  const [students, setStudents] = useState({\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    middleName: \"\",\r\n    dob: \"\",\r\n    major: \"\",\r\n    userId: \"\",\r\n  });\r\n  const { firstName, middleName, lastName, dob, major, userId } = students;\r\n  // Fetch the current student data from the server based on ID\r\n  const { id } = useParams();\r\n  console.log(id);\r\n  // useEffect(() => {\r\n  //   fetchStudentDetails(id);\r\n  // }, [id]);\r\n\r\n  // const fetchStudentDetails = async (id) => {\r\n  //   const state = dispatch(findStudent(id));\r\n  //   console.log(state);\r\n  //   // console.log(setData(dispatch(findStudent(id))));\r\n  // };\r\n  useEffect(() => {\r\n    fetchStudentDetails(id);\r\n  }, [id]);\r\n\r\n  const fetchStudentDetails = async (id) => {\r\n    // const { name, value } = students.target;\r\n    console.log(dispatch(findStudent(id)));\r\n    dispatch(findStudent(id))\r\n      .then((response) => {\r\n        const inputData = response.payload;\r\n        console.log(inputData);\r\n        console.log(setStudents(inputData));\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        // Handle error if needed\r\n      });\r\n  };\r\n  const onInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    if (name !== \"dob\") {\r\n      console.log(name, value);\r\n      // Capitalize the first letter of each word in the input\r\n      const capitalizedValue = value\r\n        .split(\" \")\r\n        .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\r\n        .join(\" \");\r\n\r\n      setStudents({ ...students, [name]: capitalizedValue });\r\n    } else {\r\n      console.log(name, value);\r\n\r\n      setStudents({ ...students, [name]: value });\r\n    }\r\n  };\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    // console.log(students);\r\n    dispatch(updateStudent(id, students));\r\n    toast.success(\"Student Updated Successfully\");\r\n    // Fetch the updated list of students after adding a new student\r\n    await dispatch(fetchStudents()).then(() => {\r\n      navigate(\"/\");\r\n      // window.location.reload();\r\n    });\r\n  };\r\n  // useEffect(() => {\r\n  //   fetchStudentData();\r\n  // }, [id]);\r\n  // const fetchStudentData = async () => {\r\n  //   try {\r\n  //     const response = await axios.get(`http://localhost:8090/student/${id}`);\r\n  //     const studentData = response.data; // Assuming the response contains the student data\r\n  //     setStudents(studentData);\r\n  //     console.log(response.json);\r\n  //   } catch (error) {\r\n  //     console.error(error);\r\n  //     // Handle error if needed\r\n  //   }\r\n  // };\r\n\r\n  return (\r\n    <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n      <div className=\" container\">\r\n        <div className=\" col-md-6 offset-md-3 my-5 border rounded p-4 mt-2 shadow\">\r\n          <form onSubmit={(e) => onSubmit(e)} class=\"row g-3\">\r\n            <h2 className=\"text-centre\">Update Student</h2>\r\n            <div className=\"col-md-4\">\r\n              <label for=\"inputLastName\" className=\"form-label\">\r\n                Last name <a style={{ color: \"red\" }}> *</a>\r\n              </label>\r\n              <input\r\n                id=\"inputLastName\"\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                name=\"lastName\"\r\n                value={lastName}\r\n                onChange={(e) => onInputChange(e)}\r\n                required\r\n                style={{ textTransform: \"capitalize\" }}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              <label for=\"inputMiddleName\" className=\"form-label\">\r\n                Middle name\r\n              </label>\r\n              <input\r\n                value={middleName}\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                name=\"middleName\"\r\n                onChange={(e) => onInputChange(e)}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              <label for=\"inputFirstName\" className=\"form-label\">\r\n                First name <a style={{ color: \"red\" }}> *</a>\r\n              </label>\r\n              <input\r\n                value={firstName}\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                name=\"firstName\"\r\n                onChange={(e) => onInputChange(e)}\r\n                required\r\n              />\r\n            </div>\r\n\r\n            <div className=\"col-md-6\">\r\n              <label for=\"Date of Birth\" className=\"form-label\">\r\n                Date of Birth <a style={{ color: \"red\" }}> *</a>\r\n              </label>\r\n              <input\r\n                className=\"form-control\"\r\n                type=\"date\"\r\n                name=\"dob\"\r\n                onChange={(e) => onInputChange(e)}\r\n                value={dob}\r\n                min=\"1000-01-01\"\r\n                max=\"2024-01-01\"\r\n                required\r\n              />\r\n            </div>\r\n            <div className=\"col-md-6\">\r\n              <label for=\"major\" className=\"form-label\">\r\n                Major <a style={{ color: \"red\" }}>*</a>\r\n              </label>\r\n              <input\r\n                value={major}\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                name=\"major\"\r\n                onChange={(e) => onInputChange(e)}\r\n                required\r\n              />\r\n            </div>\r\n            <div className=\"col-md-6\">\r\n              <label for=\"major\" className=\"form-label\">\r\n                User ID <a style={{ color: \"red\" }}>*</a>\r\n              </label>\r\n              <input\r\n                value={userId}\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                name=\"major\"\r\n                onChange={(e) => onInputChange(e)}\r\n                // required\r\n              />\r\n            </div>\r\n            <div className=\"d-grid gap-2 col-6 mx-auto\">\r\n              <button className=\"btn btn-primary\" type=\"submit\">\r\n                Submit\r\n              </button>\r\n              <Link className=\"btn btn-outline-danger\" to=\"/\">\r\n                Cancel\r\n              </Link>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </LocalizationProvider>\r\n  );\r\n}\r\n","D:\\Documents\\Project\\crud-app\\frontend\\src\\Layout\\Navbar.js",["182","183","184","185","186","187","188"],[],"import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport Login from \"../pages/Login\";\r\nimport Register from \"../pages/Register\";\r\nimport Profile from \"../pages/Profile\";\r\nimport BoardUser from \"../pages/BoardUser\";\r\nimport BoardModerator from \"../pages/BoardModerator\";\r\nimport BoardAdmin from \"../pages/BoardAdmin\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { logout, clearMessage } from \"../actions\";\r\n\r\nexport default function Navbar() {\r\n  const [showModeratorBoard, setShowModeratorBoard] = useState(false);\r\n  const [showAdminBoard, setShowAdminBoard] = useState(false);\r\n\r\n  const { user: currentUser } = useSelector((state) => state.auth);\r\n  const dispatch = useDispatch();\r\n\r\n  let location = useLocation();\r\n\r\n  useEffect(() => {\r\n    if ([\"/login\", \"/register\"].includes(location.pathname)) {\r\n      dispatch(clearMessage()); // clear message when changing location\r\n    }\r\n  }, [dispatch, location]);\r\n\r\n  const logOut = useCallback(() => {\r\n    dispatch(logout());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      setShowModeratorBoard(currentUser.roles.includes(\"ROLE_MODERATOR\"));\r\n      setShowAdminBoard(currentUser.roles.includes(\"ROLE_ADMIN\"));\r\n    } else {\r\n      setShowModeratorBoard(false);\r\n      setShowAdminBoard(false);\r\n    }\r\n  }, [currentUser]);\r\n  return (\r\n    <nav\r\n      className=\"navbar navbar-expand-lg bg-body-tertiary\"\r\n      data-bs-theme=\"dark\"\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand hover\" href=\"#\">\r\n          <Link to=\"/\">\r\n            <img\r\n              src=\"https://upload.wikimedia.org/wikipedia/commons/1/11/FPT_logo_2010.svg\"\r\n              alt=\"fpt\"\r\n              width=\"30\"\r\n              height=\"24\"\r\n            />\r\n          </Link>\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarNav\"\r\n          aria-controls=\"navbarNav\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n          <ul className=\"navbar-nav\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link>\r\n            </li>\r\n            {showModeratorBoard && (\r\n              <li className=\"nav-item\">\r\n                <Link to={\"/mod\"} className=\"nav-link\">\r\n                  Moderator Board\r\n                </Link>\r\n              </li>\r\n            )}\r\n\r\n            {showAdminBoard && (\r\n              <li className=\"nav-item\">\r\n                <Link to={\"/admin\"} className=\"nav-link\">\r\n                  Admin Board\r\n                </Link>\r\n              </li>\r\n            )}\r\n\r\n            {currentUser && (\r\n              <li className=\"nav-item\">\r\n                <Link to={\"/user\"} className=\"nav-link\">\r\n                  User Board\r\n                </Link>\r\n              </li>\r\n            )}\r\n          </ul>\r\n          {currentUser ? (\r\n            <ul className=\"navbar-nav ms-auto\">\r\n              <li className=\"nav-item \">\r\n                <Link to={\"/profile\"} className=\"nav-link\">\r\n                  {currentUser.username}\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item \">\r\n                <a href=\"/login\" className=\"nav-link\" onClick={logOut}>\r\n                  Log Out\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          ) : (\r\n            <div className=\"navbar-nav ms-auto\">\r\n              <li className=\"nav-item\">\r\n                <Link to={\"/login\"} className=\"nav-link\">\r\n                  Login\r\n                </Link>\r\n              </li>\r\n\r\n              <li className=\"nav-item\">\r\n                <Link to={\"/register\"} className=\"nav-link\">\r\n                  Register\r\n                </Link>\r\n              </li>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n","D:\\Documents\\Project\\crud-app\\frontend\\src\\students\\ReadStudent.js",["189","190"],[],"import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { formatDate } from \"../Components/FormatDate\";\r\nexport default function ReadStudent() {\r\n  const [students, setStudents] = useState({\r\n    firstName: \"\",\r\n    middleName: \"\",\r\n    lastName: \"\",\r\n    dob: \"\",\r\n    major: \"\",\r\n  });\r\n  //get id from url\r\n  const { id } = useParams();\r\n  //get student info\r\n  useEffect(() => {\r\n    loadStudent();\r\n  }, []);\r\n  const loadStudent = async () => {\r\n    const result = await axios.get(`http://localhost:8090/student/${id}`);\r\n    setStudents(result.data);\r\n  };\r\n  //format table\r\n  const tableStyle = {\r\n    width: \"50%\", // Set the desired width for the table\r\n    margin: \"0 auto\",\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h2 className=\"text-center mt-2\">Student Details</h2>\r\n      <table\r\n        class=\"table table-xl table-bordered table-hover table-striped\"\r\n        style={tableStyle}\r\n      >\r\n        <tbody>\r\n          <tr>\r\n            <th>Student ID</th>\r\n            <td class=\"w-75\">{students.id}</td>\r\n          </tr>\r\n          <tr>\r\n            <th>First Name</th>\r\n            <td>{students.firstName}</td>\r\n          </tr>\r\n          <tr>\r\n            <th>First Name</th>\r\n            <td>{students.middleName}</td>\r\n          </tr>\r\n          <tr>\r\n            <th>Last Name</th>\r\n            <td>{students.lastName}</td>\r\n          </tr>\r\n          <tr>\r\n            <th>Date of Birth</th>\r\n            <td>{formatDate(students.dob)}</td>\r\n          </tr>\r\n          <tr>\r\n            <th>Major</th>\r\n            <td>{students.major}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Documents\\Project\\crud-app\\frontend\\src\\reducers\\root-reducer.js",[],[],"D:\\Documents\\Project\\crud-app\\frontend\\src\\actions.js",["191"],[],"// actions.js\r\nimport AuthService from \"./services/auth.service\";\r\nimport axios from \"axios\";\r\nimport {\r\n  FETCH_STUDENTS_SUCCESS,\r\n  DELETE_STUDENT_SUCCESS,\r\n  ADD_STUDENT_SUCCESS,\r\n  UPDATE_STUDENT_SUCCESS,\r\n  FIND_STUDENT_SUCCESS,\r\n  SET_MESSAGE,\r\n  CLEAR_MESSAGE,\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  LOGIN_FAIL,\r\n  LOGIN_SUCCESS,\r\n  LOGOUT,\r\n} from \"./actionTypes\";\r\n\r\nexport const fetchStudents = () => async (dispatch) => {\r\n  try {\r\n    const studentData = await axios.get(\"http://localhost:8090/student\");\r\n    const token = studentData.data.token; // Get the token from the response\r\n    //TODO: check if token is valid\r\n    // if (token) {\r\n    dispatch({ type: FETCH_STUDENTS_SUCCESS, payload: studentData.data });\r\n    // }\r\n    console.log(studentData.data);\r\n  } catch (error) {\r\n    console.log(error);\r\n    // Handle error if needed\r\n  }\r\n};\r\n\r\nexport const deleteStudent = (id) => async (dispatch) => {\r\n  try {\r\n    await axios.delete(`http://localhost:8090/delete/${id}`);\r\n    dispatch({ type: DELETE_STUDENT_SUCCESS, payload: id });\r\n  } catch (error) {\r\n    console.log(error);\r\n    // Handle error if needed\r\n  }\r\n};\r\nexport const addStudent = (studentData) => async (dispatch) => {\r\n  try {\r\n    const token = localStorage.getItem(\"jwtToken\");\r\n    console.log(token);\r\n    // Make sure the token is available\r\n    if (token) {\r\n      // Include the token in the request headers\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      };\r\n      console.log(config);\r\n      await axios.post(\"http://localhost:8090/save\", studentData, config);\r\n      dispatch({ type: ADD_STUDENT_SUCCESS });\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n    // Handle error if needed\r\n  }\r\n};\r\n//add can be used for both update and add\r\nexport const updateStudent = (id, studentData) => async (dispatch) => {\r\n  try {\r\n    await axios.put(`http://localhost:8090/update/${id}`, studentData);\r\n    console.log(studentData);\r\n    dispatch({ type: UPDATE_STUDENT_SUCCESS, payload: id });\r\n  } catch (error) {\r\n    console.log(error);\r\n    // Handle error if needed\r\n  }\r\n};\r\n\r\nexport const findStudent = (id) => async (dispatch) => {\r\n  try {\r\n    const response = await axios.get(`http://localhost:8090/student/${id}`);\r\n    const studentData = response.data; // Assuming the response contains the student data\r\n    console.log(studentData);\r\n    // return studentData;\r\n    return dispatch({ type: FIND_STUDENT_SUCCESS, payload: studentData });\r\n\r\n    // return studentData;\r\n  } catch (error) {\r\n    console.error(error);\r\n    // Handle error if needed\r\n  }\r\n};\r\nexport const setMessage = (message) => ({\r\n  type: SET_MESSAGE,\r\n  payload: message,\r\n});\r\n\r\nexport const clearMessage = () => ({\r\n  type: CLEAR_MESSAGE,\r\n});\r\n\r\nexport const register = (username, email, password) => (dispatch) => {\r\n  return AuthService.register(username, email, password).then(\r\n    (response) => {\r\n      dispatch({\r\n        type: REGISTER_SUCCESS,\r\n      });\r\n\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: response.data.message,\r\n      });\r\n\r\n      return Promise.resolve();\r\n    },\r\n    (error) => {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n\r\n      dispatch({\r\n        type: REGISTER_FAIL,\r\n      });\r\n\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: message,\r\n      });\r\n\r\n      return Promise.reject();\r\n    }\r\n  );\r\n};\r\n\r\nexport const login = (username, password) => (dispatch) => {\r\n  return AuthService.login(username, password).then(\r\n    (data) => {\r\n      dispatch({\r\n        type: LOGIN_SUCCESS,\r\n        payload: { user: data },\r\n      });\r\n\r\n      return Promise.resolve();\r\n    },\r\n    (error) => {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n\r\n      dispatch({\r\n        type: LOGIN_FAIL,\r\n      });\r\n\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: message,\r\n      });\r\n\r\n      return Promise.reject();\r\n    }\r\n  );\r\n};\r\n\r\nexport const logout = () => (dispatch) => {\r\n  AuthService.logout();\r\n\r\n  dispatch({\r\n    type: LOGOUT,\r\n  });\r\n};\r\n","D:\\Documents\\Project\\crud-app\\frontend\\src\\Components\\FormatDate.js",["192"],[],"import React from \"react\";\r\n\r\nexport const formatDate = (dateString) => {\r\n  const date = new Date(dateString);\r\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\r\n  const day = String(date.getDate()).padStart(2, \"0\");\r\n  const year = date.getFullYear();\r\n  if (dateString !== null) {\r\n    return `${month}/${day}/${year}`;\r\n  }\r\n};\r\n","D:\\Documents\\Project\\crud-app\\frontend\\src\\services\\user.service.js",["193"],[],"import axios from \"axios\";\r\nimport authHeader from \"./auth-header\";\r\n\r\nconst API_URL = \"http://localhost:8090/test/\";\r\n\r\nconst getPublicContent = () => {\r\n  return axios.get(API_URL + \"all\");\r\n};\r\n\r\nconst getUserBoard = () => {\r\n  return axios.get(API_URL + \"user\", { headers: authHeader() });\r\n};\r\n\r\nconst getModeratorBoard = () => {\r\n  return axios.get(API_URL + \"mod\", { headers: authHeader() });\r\n};\r\n\r\nconst getAdminBoard = () => {\r\n  return axios.get(API_URL + \"admin\", { headers: authHeader() });\r\n};\r\n\r\nexport default {\r\n  getPublicContent,\r\n  getUserBoard,\r\n  getModeratorBoard,\r\n  getAdminBoard,\r\n};\r\n","D:\\Documents\\Project\\crud-app\\frontend\\src\\Components\\ConfirmBox.js",["194"],[],"import React, { forwardRef } from \"react\";\r\nimport {\r\n  Box,\r\n  Dialog,\r\n  DialogContent,\r\n  Fade,\r\n  IconButton,\r\n  Typography,\r\n  Button,\r\n  Grid,\r\n} from \"@mui/material\";\r\n\r\nconst Transition = forwardRef(function Transition(props, ref) {\r\n  return <Fade ref={ref} {...props} />;\r\n});\r\n\r\n//open dialog box to confirm delete\r\nexport default function ConfirmBox({\r\n  open,\r\n  closeDialog,\r\n  firstName,\r\n  deleteFunction,\r\n}) {\r\n  return (\r\n    <Dialog\r\n      fullWidth\r\n      open={open}\r\n      maxWidth=\"md\"\r\n      scroll=\"body\"\r\n      onClose={closeDialog}\r\n      onBackdropClick={closeDialog}\r\n      TransitionComponent={Transition}\r\n    >\r\n      <DialogContent sx={{ px: 8, py: 6, position: \"relative\" }}>\r\n        <IconButton\r\n          size=\"medium\"\r\n          onClick={closeDialog}\r\n          sx={{ position: \"absolute\", right: \"1rem\", top: \"1rem\" }}\r\n        >\r\n          X\r\n        </IconButton>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12}>\r\n            <Box\r\n              sx={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                textAlign: \"center\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              {/* <Typography variant=\"h5\">Delete {firstName}</Typography> */}\r\n\r\n              <img\r\n                width=\"100\"\r\n                height=\"100\"\r\n                src=\"https://cdn-icons-png.flaticon.com/128/8848/8848798.png\"\r\n              />\r\n\r\n              <Typography variant=\"body1\" fontWeight=\"fontWeightBold\">\r\n                <br />\r\n                Are you sure you want to delete{\" \"}\r\n                <Typography\r\n                  fontStyle=\"italic\"\r\n                  fontWeight=\"fontWeightBold\"\r\n                  display=\"inline\"\r\n                >\r\n                  \"{firstName}\"\r\n                </Typography>{\" \"}\r\n                ?\r\n              </Typography>\r\n              <Typography variant=\"body2 bold\">\r\n                This action cannot be undone.\r\n              </Typography>\r\n            </Box>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            xs={12}\r\n            sx={{ display: \"flex\", justifyContent: \"center\", gap: \"1rem\" }}\r\n          >\r\n            <Button\r\n              onClick={closeDialog}\r\n              size=\"large\"\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              onClick={deleteFunction}\r\n              size=\"large\"\r\n              variant=\"outlined\"\r\n              color=\"error\"\r\n            >\r\n              Delete\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n","D:\\Documents\\Project\\crud-app\\frontend\\src\\reducers\\students-reducer.js",["195","196"],[],"// reducers.js\r\n// import { combineReducers } from \"redux\";\r\nimport {\r\n  FETCH_STUDENTS_SUCCESS,\r\n  DELETE_STUDENT_SUCCESS,\r\n  ADD_STUDENT_SUCCESS,\r\n  UPDATE_STUDENT_SUCCESS,\r\n  FIND_STUDENT_SUCCESS,\r\n} from \"../actionTypes\";\r\n// const initialState = {\r\n//   students: {\r\n//     firstName: \"\",\r\n//     lastName: \"\",\r\n//     middleName: \"\",\r\n//     dob: \"\",\r\n//     major: \"\",\r\n//   },\r\n// };\r\nconst studentsReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case FETCH_STUDENTS_SUCCESS:\r\n      return action.payload;\r\n    case DELETE_STUDENT_SUCCESS:\r\n      return state.filter((student) => student.id !== action.payload);\r\n    case UPDATE_STUDENT_SUCCESS:\r\n      return state.map((student) =>\r\n        student.id === action.payload.id ? action.payload : student\r\n      );\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n// needed, cuz default state is false, not null\r\n// const addStudentReducer = (state = false, action) => {\r\n//   switch (action.type) {\r\n//     case ADD_STUDENT_SUCCESS:\r\n//       return true;\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n// const findStudentReducer = (state = initialState, action) => {\r\n//   switch (action.type) {\r\n//     case FIND_STUDENT_SUCCESS:\r\n//       return {\r\n//         students: action.payload,\r\n//       };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// export default combineReducers({\r\n//   students: studentsReducer,\r\n//   addStudentReducer: addStudentReducer,\r\n//   findStudentReducer: findStudentReducer,\r\n// });\r\nexport default studentsReducer;\r\n// const crudReducer = combineReducers({\r\n//   students: studentsReducer,\r\n//   addStudentReducer: addStudentReducer,\r\n//   findStudentReducer: findStudentReducer,\r\n// });\r\n// export default crudReducer;\r\n","D:\\Documents\\Project\\crud-app\\frontend\\src\\reducers\\find-student-reducer.js",[],[],"D:\\Documents\\Project\\crud-app\\frontend\\src\\reducers\\add-student-reducer.js",[],[],"D:\\Documents\\Project\\crud-app\\frontend\\src\\reducers\\auth-reducers.js",["197"],[],"import {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT,\r\n} from \"../actionTypes\";\r\n\r\nconst user = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\nconst initialState = user\r\n  ? { isLoggedIn: true, user }\r\n  : { isLoggedIn: false, user: null };\r\n\r\nexport default function (state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case REGISTER_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoggedIn: false,\r\n      };\r\n    case REGISTER_FAIL:\r\n      return {\r\n        ...state,\r\n        isLoggedIn: false,\r\n      };\r\n    case LOGIN_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoggedIn: true,\r\n        user: payload.user,\r\n      };\r\n    case LOGIN_FAIL:\r\n      return {\r\n        ...state,\r\n        isLoggedIn: false,\r\n        user: null,\r\n      };\r\n    case LOGOUT:\r\n      return {\r\n        ...state,\r\n        isLoggedIn: false,\r\n        user: null,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","D:\\Documents\\Project\\crud-app\\frontend\\src\\reducers\\message-reducer.js",["198"],[],"import { SET_MESSAGE, CLEAR_MESSAGE } from \"../actionTypes\";\r\n\r\nconst initialState = {};\r\n\r\nexport default function (state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case SET_MESSAGE:\r\n      return { message: payload };\r\n\r\n    case CLEAR_MESSAGE:\r\n      return { message: \"\" };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","D:\\Documents\\Project\\crud-app\\frontend\\src\\actionTypes.js",[],[],"D:\\Documents\\Project\\crud-app\\frontend\\src\\services\\auth.service.js",["199"],[],"import axios from \"axios\";\r\n\r\nconst API_URL = \"http://localhost:8090/\";\r\n\r\nconst register = (username, email, password) => {\r\n  return axios.post(API_URL + \"signup\", {\r\n    username,\r\n    email,\r\n    password,\r\n  });\r\n};\r\n\r\nconst login = (username, password) => {\r\n  return axios\r\n    .post(API_URL + \"signin\", {\r\n      username,\r\n      password,\r\n    })\r\n    .then((response) => {\r\n      if (response.data.accessToken) {\r\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n      }\r\n\r\n      return response.data;\r\n    });\r\n};\r\n\r\nconst logout = () => {\r\n  localStorage.removeItem(\"user\");\r\n};\r\n\r\nexport default {\r\n  register,\r\n  login,\r\n  logout,\r\n};\r\n","D:\\Documents\\Project\\crud-app\\frontend\\src\\services\\auth-header.js",[],[],{"ruleId":"200","severity":1,"message":"201","line":6,"column":7,"nodeType":"202","messageId":"203","endLine":6,"endColumn":17},{"ruleId":"204","severity":1,"message":"205","line":35,"column":5,"nodeType":"206","messageId":"207","endLine":45,"endColumn":6},{"ruleId":"200","severity":1,"message":"208","line":8,"column":8,"nodeType":"202","messageId":"203","endLine":8,"endColumn":25},{"ruleId":"200","severity":1,"message":"209","line":17,"column":8,"nodeType":"202","messageId":"203","endLine":17,"endColumn":19},{"ruleId":"200","severity":1,"message":"210","line":24,"column":19,"nodeType":"202","messageId":"203","endLine":24,"endColumn":29},{"ruleId":"200","severity":1,"message":"211","line":120,"column":9,"nodeType":"202","messageId":"203","endLine":120,"endColumn":24},{"ruleId":"200","severity":1,"message":"212","line":238,"column":9,"nodeType":"202","messageId":"203","endLine":238,"endColumn":21},{"ruleId":"204","severity":1,"message":"205","line":40,"column":5,"nodeType":"206","messageId":"207","endLine":50,"endColumn":6},{"ruleId":"200","severity":1,"message":"208","line":8,"column":8,"nodeType":"202","messageId":"203","endLine":8,"endColumn":25},{"ruleId":"200","severity":1,"message":"212","line":265,"column":9,"nodeType":"202","messageId":"203","endLine":265,"endColumn":21},{"ruleId":"200","severity":1,"message":"213","line":2,"column":29,"nodeType":"202","messageId":"203","endLine":2,"endColumn":38},{"ruleId":"214","severity":1,"message":"215","line":65,"column":25,"nodeType":"216","endLine":65,"endColumn":53},{"ruleId":"214","severity":1,"message":"215","line":91,"column":26,"nodeType":"216","endLine":91,"endColumn":54},{"ruleId":"214","severity":1,"message":"215","line":105,"column":29,"nodeType":"216","endLine":105,"endColumn":57},{"ruleId":"214","severity":1,"message":"215","line":120,"column":21,"nodeType":"216","endLine":120,"endColumn":49},{"ruleId":"200","severity":1,"message":"217","line":2,"column":8,"nodeType":"202","messageId":"203","endLine":2,"endColumn":13},{"ruleId":"200","severity":1,"message":"218","line":9,"column":23,"nodeType":"202","messageId":"203","endLine":9,"endColumn":34},{"ruleId":"219","severity":1,"message":"220","line":40,"column":6,"nodeType":"221","endLine":40,"endColumn":10,"suggestions":"222"},{"ruleId":"214","severity":1,"message":"215","line":108,"column":27,"nodeType":"216","endLine":108,"endColumn":55},{"ruleId":"214","severity":1,"message":"215","line":135,"column":28,"nodeType":"216","endLine":135,"endColumn":56},{"ruleId":"214","severity":1,"message":"215","line":149,"column":31,"nodeType":"216","endLine":149,"endColumn":59},{"ruleId":"214","severity":1,"message":"215","line":164,"column":23,"nodeType":"216","endLine":164,"endColumn":51},{"ruleId":"214","severity":1,"message":"215","line":177,"column":25,"nodeType":"216","endLine":177,"endColumn":53},{"ruleId":"200","severity":1,"message":"223","line":3,"column":8,"nodeType":"202","messageId":"203","endLine":3,"endColumn":13},{"ruleId":"200","severity":1,"message":"224","line":4,"column":8,"nodeType":"202","messageId":"203","endLine":4,"endColumn":16},{"ruleId":"200","severity":1,"message":"225","line":5,"column":8,"nodeType":"202","messageId":"203","endLine":5,"endColumn":15},{"ruleId":"200","severity":1,"message":"226","line":6,"column":8,"nodeType":"202","messageId":"203","endLine":6,"endColumn":17},{"ruleId":"200","severity":1,"message":"227","line":7,"column":8,"nodeType":"202","messageId":"203","endLine":7,"endColumn":22},{"ruleId":"200","severity":1,"message":"228","line":8,"column":8,"nodeType":"202","messageId":"203","endLine":8,"endColumn":18},{"ruleId":"214","severity":1,"message":"229","line":46,"column":9,"nodeType":"216","endLine":46,"endColumn":52},{"ruleId":"200","severity":1,"message":"230","line":3,"column":10,"nodeType":"202","messageId":"203","endLine":3,"endColumn":14},{"ruleId":"219","severity":1,"message":"231","line":18,"column":6,"nodeType":"221","endLine":18,"endColumn":8,"suggestions":"232"},{"ruleId":"200","severity":1,"message":"233","line":22,"column":11,"nodeType":"202","messageId":"203","endLine":22,"endColumn":16},{"ruleId":"200","severity":1,"message":"234","line":1,"column":8,"nodeType":"202","messageId":"203","endLine":1,"endColumn":13},{"ruleId":"235","severity":1,"message":"236","line":22,"column":1,"nodeType":"237","endLine":27,"endColumn":3},{"ruleId":"238","severity":1,"message":"239","line":54,"column":15,"nodeType":"216","endLine":58,"endColumn":17},{"ruleId":"200","severity":1,"message":"240","line":6,"column":3,"nodeType":"202","messageId":"203","endLine":6,"endColumn":22},{"ruleId":"200","severity":1,"message":"241","line":8,"column":3,"nodeType":"202","messageId":"203","endLine":8,"endColumn":23},{"ruleId":"235","severity":1,"message":"242","line":15,"column":1,"nodeType":"237","endLine":50,"endColumn":2},{"ruleId":"235","severity":1,"message":"242","line":5,"column":1,"nodeType":"237","endLine":18,"endColumn":2},{"ruleId":"235","severity":1,"message":"236","line":32,"column":1,"nodeType":"237","endLine":36,"endColumn":3},"no-unused-vars","'middleWare' is assigned a value but never used.","Identifier","unusedVar","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'paginationFactory' is defined but never used.","'UserService' is defined but never used.","'setContent' is assigned a value but never used.","'actionFormatter' is assigned a value but never used.","'currentItems' is assigned a value but never used.","'useParams' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'axios' is defined but never used.","'useSelector' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchStudentDetails'. Either include it or remove the dependency array.","ArrayExpression",["243"],"'Login' is defined but never used.","'Register' is defined but never used.","'Profile' is defined but never used.","'BoardUser' is defined but never used.","'BoardModerator' is defined but never used.","'BoardAdmin' is defined but never used.","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'Link' is defined but never used.","React Hook useEffect has a missing dependency: 'loadStudent'. Either include it or remove the dependency array.",["244"],"'token' is assigned a value but never used.","'React' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'ADD_STUDENT_SUCCESS' is defined but never used.","'FIND_STUDENT_SUCCESS' is defined but never used.","Unexpected default export of anonymous function",{"desc":"245","fix":"246"},{"desc":"247","fix":"248"},"Update the dependencies array to be: [fetchStudentDetails, id]",{"range":"249","text":"250"},"Update the dependencies array to be: [loadStudent]",{"range":"251","text":"252"},[1462,1466],"[fetchStudentDetails, id]",[494,496],"[loadStudent]"]