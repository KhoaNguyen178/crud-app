{"ast":null,"code":"// actions.js\nimport AuthService from \"./services/auth.service\";\nimport axios from \"axios\";\nimport { FETCH_STUDENTS_SUCCESS, DELETE_STUDENT_SUCCESS, ADD_STUDENT_SUCCESS, UPDATE_STUDENT_SUCCESS, FIND_STUDENT_SUCCESS, SET_MESSAGE, CLEAR_MESSAGE, REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_FAIL, LOGIN_SUCCESS, LOGOUT } from \"./actionTypes\";\nexport const fetchStudents = () => async dispatch => {\n  try {\n    const studentData = await axios.get(\"http://localhost:8090/student\");\n    const token = studentData.data.token; // Get the token from the response\n\n    dispatch({\n      type: FETCH_STUDENTS_SUCCESS,\n      payload: studentData.data\n    });\n    console.log(studentData.data);\n  } catch (error) {\n    console.log(error);\n    // Handle error if needed\n  }\n};\n\nexport const deleteStudent = id => async dispatch => {\n  try {\n    await axios.delete(`http://localhost:8090/delete/${id}`);\n    dispatch({\n      type: DELETE_STUDENT_SUCCESS,\n      payload: id\n    });\n  } catch (error) {\n    console.log(error);\n    // Handle error if needed\n  }\n};\n\nexport const addStudent = studentData => async dispatch => {\n  try {\n    const token = localStorage.getItem(\"jwtToken\");\n    console.log(token);\n    // Make sure the token is available\n    if (token) {\n      // Include the token in the request headers\n      const config = {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      };\n      console.log(config);\n      await axios.post(\"http://localhost:8090/save\", studentData, config);\n      dispatch({\n        type: ADD_STUDENT_SUCCESS\n      });\n    }\n  } catch (error) {\n    console.log(error);\n    // Handle error if needed\n  }\n};\n//add can be used for both update and add\nexport const updateStudent = (id, studentData) => async dispatch => {\n  try {\n    await axios.put(`http://localhost:8090/update/${id}`, studentData);\n    console.log(studentData);\n    dispatch({\n      type: UPDATE_STUDENT_SUCCESS,\n      payload: id\n    });\n  } catch (error) {\n    console.log(error);\n    // Handle error if needed\n  }\n};\n\nexport const findStudent = id => async dispatch => {\n  try {\n    const response = await axios.get(`http://localhost:8090/student/${id}`);\n    const studentData = response.data; // Assuming the response contains the student data\n    console.log(studentData);\n    // return studentData;\n    return dispatch({\n      type: FIND_STUDENT_SUCCESS,\n      payload: studentData\n    });\n\n    // return studentData;\n  } catch (error) {\n    console.error(error);\n    // Handle error if needed\n  }\n};\n\nexport const setMessage = message => ({\n  type: SET_MESSAGE,\n  payload: message\n});\nexport const clearMessage = () => ({\n  type: CLEAR_MESSAGE\n});\nexport const register = (username, email, password) => dispatch => {\n  return AuthService.register(username, email, password).then(response => {\n    dispatch({\n      type: REGISTER_SUCCESS\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: response.data.message\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: REGISTER_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const login = (username, password) => dispatch => {\n  return AuthService.login(username, password).then(data => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: {\n        user: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const logout = () => dispatch => {\n  AuthService.logout();\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"names":["AuthService","axios","FETCH_STUDENTS_SUCCESS","DELETE_STUDENT_SUCCESS","ADD_STUDENT_SUCCESS","UPDATE_STUDENT_SUCCESS","FIND_STUDENT_SUCCESS","SET_MESSAGE","CLEAR_MESSAGE","REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_FAIL","LOGIN_SUCCESS","LOGOUT","fetchStudents","dispatch","studentData","get","token","data","type","payload","console","log","error","deleteStudent","id","delete","addStudent","localStorage","getItem","config","headers","Authorization","post","updateStudent","put","findStudent","response","setMessage","message","clearMessage","register","username","email","password","then","Promise","resolve","toString","reject","login","user","logout"],"sources":["D:/Documents/Project/crud-app/frontend/src/actions.js"],"sourcesContent":["// actions.js\r\nimport AuthService from \"./services/auth.service\";\r\nimport axios from \"axios\";\r\nimport {\r\n  FETCH_STUDENTS_SUCCESS,\r\n  DELETE_STUDENT_SUCCESS,\r\n  ADD_STUDENT_SUCCESS,\r\n  UPDATE_STUDENT_SUCCESS,\r\n  FIND_STUDENT_SUCCESS,\r\n  SET_MESSAGE,\r\n  CLEAR_MESSAGE,\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  LOGIN_FAIL,\r\n  LOGIN_SUCCESS,\r\n  LOGOUT,\r\n} from \"./actionTypes\";\r\n\r\nexport const fetchStudents = () => async (dispatch) => {\r\n  try {\r\n    const studentData = await axios.get(\"http://localhost:8090/student\");\r\n    const token = studentData.data.token; // Get the token from the response\r\n\r\n    dispatch({ type: FETCH_STUDENTS_SUCCESS, payload: studentData.data });\r\n\r\n    console.log(studentData.data);\r\n  } catch (error) {\r\n    console.log(error);\r\n    // Handle error if needed\r\n  }\r\n};\r\n\r\nexport const deleteStudent = (id) => async (dispatch) => {\r\n  try {\r\n    await axios.delete(`http://localhost:8090/delete/${id}`);\r\n    dispatch({ type: DELETE_STUDENT_SUCCESS, payload: id });\r\n  } catch (error) {\r\n    console.log(error);\r\n    // Handle error if needed\r\n  }\r\n};\r\nexport const addStudent = (studentData) => async (dispatch) => {\r\n  try {\r\n    const token = localStorage.getItem(\"jwtToken\");\r\n    console.log(token);\r\n    // Make sure the token is available\r\n    if (token) {\r\n      // Include the token in the request headers\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      };\r\n      console.log(config);\r\n      await axios.post(\"http://localhost:8090/save\", studentData, config);\r\n      dispatch({ type: ADD_STUDENT_SUCCESS });\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n    // Handle error if needed\r\n  }\r\n};\r\n//add can be used for both update and add\r\nexport const updateStudent = (id, studentData) => async (dispatch) => {\r\n  try {\r\n    await axios.put(`http://localhost:8090/update/${id}`, studentData);\r\n    console.log(studentData);\r\n    dispatch({ type: UPDATE_STUDENT_SUCCESS, payload: id });\r\n  } catch (error) {\r\n    console.log(error);\r\n    // Handle error if needed\r\n  }\r\n};\r\n\r\nexport const findStudent = (id) => async (dispatch) => {\r\n  try {\r\n    const response = await axios.get(`http://localhost:8090/student/${id}`);\r\n    const studentData = response.data; // Assuming the response contains the student data\r\n    console.log(studentData);\r\n    // return studentData;\r\n    return dispatch({ type: FIND_STUDENT_SUCCESS, payload: studentData });\r\n\r\n    // return studentData;\r\n  } catch (error) {\r\n    console.error(error);\r\n    // Handle error if needed\r\n  }\r\n};\r\nexport const setMessage = (message) => ({\r\n  type: SET_MESSAGE,\r\n  payload: message,\r\n});\r\n\r\nexport const clearMessage = () => ({\r\n  type: CLEAR_MESSAGE,\r\n});\r\n\r\nexport const register = (username, email, password) => (dispatch) => {\r\n  return AuthService.register(username, email, password).then(\r\n    (response) => {\r\n      dispatch({\r\n        type: REGISTER_SUCCESS,\r\n      });\r\n\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: response.data.message,\r\n      });\r\n\r\n      return Promise.resolve();\r\n    },\r\n    (error) => {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n\r\n      dispatch({\r\n        type: REGISTER_FAIL,\r\n      });\r\n\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: message,\r\n      });\r\n\r\n      return Promise.reject();\r\n    }\r\n  );\r\n};\r\n\r\nexport const login = (username, password) => (dispatch) => {\r\n  return AuthService.login(username, password).then(\r\n    (data) => {\r\n      dispatch({\r\n        type: LOGIN_SUCCESS,\r\n        payload: { user: data },\r\n      });\r\n\r\n      return Promise.resolve();\r\n    },\r\n    (error) => {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n\r\n      dispatch({\r\n        type: LOGIN_FAIL,\r\n      });\r\n\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: message,\r\n      });\r\n\r\n      return Promise.reject();\r\n    }\r\n  );\r\n};\r\n\r\nexport const logout = () => (dispatch) => {\r\n  AuthService.logout();\r\n\r\n  dispatch({\r\n    type: LOGOUT,\r\n  });\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}